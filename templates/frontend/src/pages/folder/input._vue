<template>
  <b-modal ref="modalInput" id="modalInput" title="Input {{PascalCase .Name}}" @ok="onSubmit">{{range .Fields}}{{if (eq .DataType "string")}}

    <b-form-group label="{{PascalCase .Name}}">
      <b-form-input type="text" v-model="inputedItem.{{CamelCase .Name}}" required autocomplete="off"></b-form-input>
    </b-form-group>{{else if (eq .DataType "int")}}

    <b-form-group label="{{PascalCase .Name}}">
      <b-form-input v-model.number="inputedItem.{{CamelCase .Name}}" type="number" required autocomplete="off"></b-form-input>
    </b-form-group>{{else if (eq .DataType "uint")}}    

    <b-form-group label="{{PascalCase .Name}}">
      <b-form-input v-model.number="inputedItem.{{CamelCase .Name}}" type="number" required autocomplete="off"></b-form-input>
    </b-form-group>{{else if (eq .DataType "float64")}}

    <b-form-group label="{{PascalCase .Name}}">
      <b-form-input v-model.number="inputedItem.{{CamelCase .Name}}" type="number" required autocomplete="off"></b-form-input>
    </b-form-group>{{else if (eq .DataType "bool")}}

    <b-form-group label="{{PascalCase .Name}}">
      <b-form-checkbox v-model="inputedItem.{{CamelCase .Name}}"></b-form-checkbox>
    </b-form-group>{{else if (eq .DataType "time.Time")}}

    <b-form-group label="{{PascalCase .Name}}">
      <b-form-input type="text" v-model="inputedItem.{{CamelCase .Name}}" required autocomplete="off"></b-form-input>
    </b-form-group>{{end}}{{end}}

  </b-modal>

</template>

<script>

import { computed } from '@vue/composition-api';
import Swal from 'sweetalert2';

export default {
  setup(_, {refs, root}) {

    const entity = '{{CamelCase .Name}}'

    const inputedItem = computed(() => root.$store.getters[`${entity}/getInputtedItem`])

    const onSubmit = async (bvModalEvt) => {      
      
      bvModalEvt.preventDefault()

      if (root.$store.getters[`${entity}/getInputMode`] === 'CREATE') {        
        root.$store.dispatch(`${entity}/createItem`, {
          afterCalled: (success, data) => {
            if (success) {
              Swal.fire('Created!', `${data}`, 'success')
              refs.modalInput.hide()
            }
          }          
        })
        return
      } 

      if (root.$store.getters[`${entity}/getInputMode`] === 'UPDATE') {
        root.$store.dispatch(`${entity}/updateItem`, {
          afterCalled: (success, data) => {
            if (success) {
              Swal.fire('Updated!', `${data}`, 'success')
              refs.modalInput.hide()
            }
          }           
        })
        return
      }
            
    }

    return {onSubmit, inputedItem}
  }
}
</script>

<style>

</style>
