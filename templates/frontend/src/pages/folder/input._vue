<template>
  <b-modal ref="modalInput" id="modalInput" title="Input {{PascalCase .Name}}" @ok="onSubmit" @shown="onShown" @hidden="onHidden">{{range .Fields}}{{if (eq .DataType "string")}}

    <b-form-group label="{{PascalCase .Name}}">
      <b-form-input type="text" v-model="state.inputedItem.{{CamelCase .Name}}" required autocomplete="off"></b-form-input>
    </b-form-group>{{else if (eq .DataType "int")}}

    <b-form-group label="{{PascalCase .Name}}">
      <b-form-input v-model.number="state.inputedItem.{{CamelCase .Name}}" type="number" required autocomplete="off"></b-form-input>
    </b-form-group>{{else if (eq .DataType "uint")}}    

    <b-form-group label="{{PascalCase .Name}}">
      <b-form-input v-model.number="state.inputedItem.{{CamelCase .Name}}" type="number" required autocomplete="off"></b-form-input>
    </b-form-group>{{else if (eq .DataType "float64")}}

    <b-form-group label="{{PascalCase .Name}}">
      <b-form-input v-model.number="state.inputedItem.{{CamelCase .Name}}" type="number" required autocomplete="off"></b-form-input>
    </b-form-group>{{else if (eq .DataType "bool")}}

    <b-form-group label="{{PascalCase .Name}}">
      <b-form-checkbox v-model="state.inputedItem.{{CamelCase .Name}}"></b-form-checkbox>
    </b-form-group>{{else if (eq .DataType "time.Time")}}

    <b-form-group label="{{PascalCase .Name}}">
      <b-form-input type="text" v-model="state.inputedItem.{{CamelCase .Name}}" required autocomplete="off"></b-form-input>
    </b-form-group>{{else if (eq .DataType "enum")}}

    <b-form-group label="{{PascalCase .Name}}">
      <b-form-select v-model="state.inputedItem.outletCode" :options="options{{PascalCase .Name}}" />
    </b-form-group>{{end}}{{end}}

  </b-modal>

</template>

<script>

import { reactive } from '@vue/composition-api';
import Swal from 'sweetalert2';

export default {
  setup(_, {refs, root}) {

    const entity = '{{CamelCase .Name}}'

    const initialObject = () => {
      return { {{range .Fields}}{{if (eq .DataType "string")}}
        {{CamelCase .Name}}: '',{{else if (eq .DataType "uint")}}
        {{CamelCase .Name}}: 0,{{else if (eq .DataType "int")}}
        {{CamelCase .Name}}: 0,{{else if (eq .DataType "float64")}}
        {{CamelCase .Name}}: 0.0,{{else if (eq .DataType "bool")}}
        {{CamelCase .Name}}: false,{{else if (eq .DataType "time.Time")}}
        {{CamelCase .Name}}: '2019-06-07T05:43:21Z', {{end}} {{end}}
      }
    }

    const state = reactive({
      inputedItem: initialObject()
    })

    const onSubmit = async (bvModalEvt) => {      
      
      bvModalEvt.preventDefault()

      if (root.$store.getters[`${entity}/getInputedItem`]) {
        root.$store.dispatch(`${entity}/updateItem`).then(response => {
          Swal.fire('Updated!', `${response}`, 'success')
          refs.modalInput.hide()
        })
        return 
      } 

      root.$store.dispatch(`${entity}/createItem`, {inputedItem: state.inputedItem}).then(response => {
        Swal.fire('Created!', `${response}`, 'success')
        refs.modalInput.hide()
      })
      
    }

    const onShown = () => {
      const inputedObject = root.$store.getters[`${entity}/getInputedItem`]
      state.inputedItem = inputedObject || initialObject()
    }

    const onHidden = () => {
      root.$store.commit(`${entity}/SET_INPUTED_ITEM`, null)      
    }

    {{range .Fields}}{{if (eq .DataType "enum")}}
      const options{{PascalCase .Name}} = [ {{range .EnumValues}}
        { value: '{{.Value}}', text: '{{.Text}}' }, {{end}}
      ]
    {{end}}{{end}}

    return {
      onSubmit, 
      onShown, 
      onHidden, 
      state,

    }
  }
}
</script>

<style>

</style>
