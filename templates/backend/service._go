package service

import (
	"{{PackageName}}/dao"
	"{{PackageName}}/model"
	"{{PackageName}}/model/basic"
	"github.com/mirzaakhena/common/transaction"
)

// I{{PascalCase .Name}}Service is
type I{{PascalCase .Name}}Service interface {
	Create(sc map[string]interface{}, obj model.Create{{PascalCase .Name}}Request) (uint, error) 	
	GetOne(sc map[string]interface{}, ID uint) *model.{{PascalCase .Name}}
	GetAll(sc map[string]interface{}, req basic.GetAllCommonRequest) *basic.GetAllCommonResponse
	Delete(sc map[string]interface{}, ID uint) error
	Update(sc map[string]interface{}, ID uint, obj model.Update{{PascalCase .Name}}Request) error
}

// {{PascalCase .Name}}Service is
type {{PascalCase .Name}}Service struct {
	{{CamelCase .Name}}Dao dao.I{{PascalCase .Name}}Dao
	trx transaction.ITransaction
}

// New{{PascalCase .Name}}Service is
func New{{PascalCase .Name}}Service(trx transaction.ITransaction, {{CamelCase .Name}}Dao dao.I{{PascalCase .Name}}Dao) *{{PascalCase .Name}}Service {
	return &{{PascalCase .Name}}Service{ 
		{{CamelCase .Name}}Dao: {{CamelCase .Name}}Dao,
		trx: trx,
	}
}

// Create is
func (g *{{PascalCase .Name}}Service) Create(sc map[string]interface{}, dto model.Create{{PascalCase .Name}}Request) (uint, error) { 

	var obj model.{{PascalCase .Name}}
	{{range .Fields}}
	obj.{{.Name}} = dto.{{.Name}} {{end}}

	tx := g.trx.GetDB(true)
	g.{{CamelCase .Name}}Dao.Create(tx, &obj)
	g.trx.CommitTransaction(tx)
	return obj.ID, nil
}

// GetOne is
func (g *{{PascalCase .Name}}Service) GetOne(sc map[string]interface{}, ID uint) *model.{{PascalCase .Name}} {
	return g.{{CamelCase .Name}}Dao.GetOne(g.trx.GetDB(false), ID)
}

// GetAll is
func (g *{{PascalCase .Name}}Service) GetAll(sc map[string]interface{}, req basic.GetAllCommonRequest) *basic.GetAllCommonResponse {

	r, c := g.{{CamelCase .Name}}Dao.GetAll(g.trx.GetDB(false), req.Page, req.Size, req.SortBy, req.SortDir, req.Filter)

	items := []interface{}{}

	for _, item := range r {
		items = append(items, item)
	}

	result := basic.GetAllCommonResponse{
		TotalCount: c,
		Items:      items,
	}

	return &result	
}

// Delete is
func (g *{{PascalCase .Name}}Service) Delete(sc map[string]interface{}, ID uint) error {
	tx := g.trx.GetDB(true)
	a := g.{{CamelCase .Name}}Dao.Delete(tx, ID)
	g.trx.CommitTransaction(tx)
	return a
}

// Update is
func (g *{{PascalCase .Name}}Service) Update(sc map[string]interface{}, ID uint, dto model.Update{{PascalCase .Name}}Request) error {

	var obj model.{{PascalCase .Name}} 
	{{range .Fields}}
	obj.{{.Name}} = dto.{{.Name}} {{end}}

	tx := g.trx.GetDB(true)
	a := g.{{CamelCase .Name}}Dao.Update(tx, ID, &obj)
	g.trx.CommitTransaction(tx)
	return a
}
