package main

import (
	"fmt"

	"github.com/gin-gonic/autotls"	
	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"	
	_ "github.com/jinzhu/gorm/dialects/mysql"  //
	_ "github.com/jinzhu/gorm/dialects/sqlite" //

	"{{PackagePath}}/controller"
	"{{PackagePath}}/repository"
	"{{PackagePath}}/service"
	"{{PackagePath}}/utils/config"
	"{{PackagePath}}/utils/log"	
	"{{PackagePath}}/utils/token"	
	"{{PackagePath}}/utils/transaction"
)

var secretKey = []byte{
	'\x3c', '\xcd', '\x11', '\x71', '\xe1', '\x8b', '\xcc', '\xb5',
	'\xb1', '\x95', '\x8e', '\x7d', '\x22', '\xdb', '\x08', '\x29',
	'\xa1', '\x28', '\x29', '\xd4', '\xbd', '\x12', '\xe5', '\xda',
	'\xa0', '\xf5', '\x4f', '\x36', '\x37', '\xd4', '\xd4', '\x5c',

	'\x7c', '\xea', '\xbd', '\x0a', '\x6f', '\x2a', '\xec', '\x2d',
	'\xaa', '\xab', '\xba', '\x92', '\x81', '\x00', '\xe3', '\xa0',
	'\x93', '\x0b', '\x10', '\x75', '\xc6', '\x97', '\xa8', '\x6a',
	'\xc9', '\xfd', '\x48', '\xdc', '\xbc', '\xb5', '\xce', '\xfe',
}


func main() {

	log.GetLog().WithFile("{{AppName}}", 14)

	log.GetLog().Info(nil, "Apps run")

	cf := config.NewSimpleConfig("config", "$GOPATH/src/{{PackagePath}}")

	db, err := gorm.Open(cf.GetString("database.dialect", "sqlite3"), cf.GetString("database.connection_string", "database.db"))
	if err != nil {
		panic(err)
	}
	db.LogMode(cf.GetBool("database.log", "false"))

	// f, err := os.OpenFile("testlogfile", os.O_RDWR|os.O_CREATE|os.O_APPEND, 0666)
	// if err != nil {
	// 	log.Fatalf("error opening file: %v", err)
	// }
	// db.SetLogger(log.New(f, "\r\n", 0))
	// gin.DefaultWriter = f

	ginRouter := gin.Default()

	trx := transaction.NewGormTransactionDB(db)

	userRepository := repository.NewUserRepository(db) {{range .Entities}}
	{{CamelCase .Name}}Repository := repository.New{{PascalCase .Name}}Repository(db) {{end}}

	userService := service.NewUserService(trx, &token.Jwt{SecretKey: secretKey}, userRepository) {{range .Entities}}
	{{CamelCase .Name}}Service := &service.{{PascalCase .Name}}Service{
		Trx: trx,
		{{PascalCase .Name}}Repository: {{CamelCase .Name}}Repository, {{range .Fields}} {{if (eq .DataType "entity")}}
		{{PascalCase .EntityReference}}Repository: {{CamelCase .EntityReference}}Repository, {{end}} {{end}}
	} {{end}}

	rc := controller.RouterConfig{
		Router: ginRouter, 
		UserController: controller.NewUserController(userService),	{{range .Entities}}
		{{PascalCase .Name}}Controller: controller.New{{PascalCase .Name}}Controller({{CamelCase .Name}}Service), {{end}}
	}

	rc.Setup()	

	if gin.Mode() == gin.ReleaseMode {
		if err := autotls.Run(ginRouter, cf.GetString("server.domain", "{{AppName}}.com")); err != nil {
			log.GetLog().Fatal(nil, "Error on TLS %v", err.Error())
		}

	} else {
		ginRouter.Run(fmt.Sprintf(":%d", cf.GetInt("server.port", "8081")))
	}
	
}
