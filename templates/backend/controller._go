package controller

import (
	"fmt"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
	"{{PackagePath}}/model"
	"{{PackagePath}}/service"
	"{{PackagePath}}/utils/common"
	"{{PackagePath}}/utils/log"
)

// {{PascalCase .Name}}Controller is
type {{PascalCase .Name}}Controller struct {
	{{CamelCase .Name}}Service service.I{{PascalCase .Name}}Service
}

// New{{PascalCase .Name}}Controller is
func New{{PascalCase .Name}}Controller({{CamelCase .Name}}Service service.I{{PascalCase .Name}}Service) *{{PascalCase .Name}}Controller {

	c := {{PascalCase .Name}}Controller{
		{{CamelCase .Name}}Service: {{CamelCase .Name}}Service,
	}

	return &c
}

// Create is
func (g *{{PascalCase .Name}}Controller) Create(c *gin.Context) {

	userID := GetUserID(c)

	sc := map[string]interface{}{
		"ip":      c.ClientIP(),
		"session": common.GetShortUniqueID(),
		"source":  "API",
		"userID":  userID,
	}

	var dto model.Create{{PascalCase .Name}}Request
	if err := c.BindJSON(&dto); err != nil {
		log.GetLog().Error(sc, "%v", err.Error())
		c.JSON(http.StatusBadRequest, map[string]interface{}{"message": "Invalid Params. Please check data structure and type"})
		return
	}

	log.GetLog().Info(sc, "REQUEST data %v", common.GetJSON(dto))

	obj, err := g.{{CamelCase .Name}}Service.Create(sc, dto)
	if err != nil {
		message := log.GetLog().Error(sc, "RESPONSE %v", err.Error())
		c.JSON(http.StatusBadRequest, map[string]interface{}{"message": message})
		return
	}

	message := log.GetLog().Info(sc, "RESPONSE %v success created", obj.ID)
	c.JSON(http.StatusCreated, map[string]interface{}{"message": message})
}

// GetOne is
func (g *{{PascalCase .Name}}Controller) GetOne(c *gin.Context) {

	userID := GetUserID(c)

	sc := map[string]interface{}{
		"ip":      c.ClientIP(),
		"session": common.GetShortUniqueID(),
		"source":  "API",
		"userID":  userID,
	}

	id := c.Param("{{CamelCase .Name}}ID")

	log.GetLog().Info(sc, "REQUEST %v", id)

	obj := g.{{CamelCase .Name}}Service.GetOne(sc, id)
	if obj == nil {
		message := log.GetLog().Info(&c, "RESPONSE ID %v not found", id)
		c.JSON(http.StatusOK, map[string]interface{}{"message": message})
		return
	}

	message := log.GetLog().Info(sc, "RESPONSE %v found", id)
	c.JSON(http.StatusOK, map[string]interface{}{"message": message, "data": obj})
}

// GetAll is
func (g *{{PascalCase .Name}}Controller) GetAll(c *gin.Context) {

	userID := GetUserID(c)

	sc := map[string]interface{}{
		"ip":      c.ClientIP(),
		"session": common.GetShortUniqueID(),
		"source":  "API",
		"userID":  userID,
	}

	pageStr := c.DefaultQuery("page", "1")
	page, err := strconv.Atoi(pageStr)
	if err != nil || page < 1 {
		page = 1
	}

	sizeStr := c.DefaultQuery("size", "30")
	size, err := strconv.Atoi(sizeStr)
	if err != nil || (size < 1 && size > 100) {
		size = 1
	}

	sortBy := c.DefaultQuery("sortBy", "")
	sortDescString := c.DefaultQuery("sortDesc", "false")

	sortDesc, err := strconv.ParseBool(sortDescString)
	if err != nil {
		c.JSON(http.StatusBadRequest, map[string]interface{}{"message": "sortDesc must bool", "data": []interface{}{}})		
		return
	}

	filters := map[string]string{}

	listField := []string{ {{range .Fields}}
		"{{CamelCase .Name}}",{{end}}
	}

	for _, field := range listField {
		if query := c.DefaultQuery("f_"+field, ""); query != "" {
			filters[field] = query
		}
	}

	log.GetLog().Info(sc, "REQUEST page %v, size %v, filter %v", page, size, common.GetJSON(filters))

	req := model.GetAllCommonRequest{
		Filters:  filters,
		Page:     page,
		Size:     size,
		SortBy:   sortBy,
		SortDesc: sortDesc,
	}

	objs := g.{{CamelCase .Name}}Service.GetAll(sc, req)

	message := log.GetLog().Info(sc, "RESPONSE found %v objects", objs.TotalCount)
	c.JSON(http.StatusOK, map[string]interface{}{"message": message, "data": objs})
}

// Update is
func (g *{{PascalCase .Name}}Controller) Update(c *gin.Context) {

	userID := GetUserID(c)

	sc := map[string]interface{}{
		"ip":      c.ClientIP(),
		"session": common.GetShortUniqueID(),
		"source":  "API",
		"userID":  userID,
	}

	id := c.Param("{{CamelCase .Name}}ID")

	var dto model.Update{{PascalCase .Name}}Request
	if err := c.BindJSON(&dto); err != nil {
		log.GetLog().Error(sc, "%v", err.Error())
		c.JSON(http.StatusBadRequest, map[string]interface{}{"message": fmt.Sprintf("Invalid Params. Please check data structure and type")})
		return
	}

	log.GetLog().Info(sc, "REQUEST ID %v, data %v", id, common.GetJSON(dto))

	_, err := g.{{CamelCase .Name}}Service.Update(sc, id, dto)
	if err != nil {
		message := log.GetLog().Error(sc, "RESPONSE %v", err.Error())
		c.JSON(http.StatusBadRequest, map[string]interface{}{"message": message})
		return
	}

	message := log.GetLog().Info(sc, "RESPONSE ID %v success updated", id)
	c.JSON(http.StatusOK, map[string]interface{}{"message": message})

}

// Delete is
func (g *{{PascalCase .Name}}Controller) Delete(c *gin.Context) {

	userID := GetUserID(c)

	sc := map[string]interface{}{
		"ip":      c.ClientIP(),
		"session": common.GetShortUniqueID(),
		"source":  "API",
		"userID":  userID,
	}

	id := c.Param("{{CamelCase .Name}}ID")

	log.GetLog().Info(sc, "REQUEST ID %v", id)

	_, err := g.{{CamelCase .Name}}Service.Delete(sc, id)
	if err != nil {
		log.GetLog().Error(sc, "RESPONSE %v", err.Error())
		c.JSON(http.StatusBadRequest, map[string]interface{}{"message": fmt.Sprintf("Error when delete record with ID %v", id)})
		return
	}

	message := log.GetLog().Info(sc, "RESPONSE ID %v success deleted", id)
	c.JSON(http.StatusOK, map[string]interface{}{"message": message})

}
