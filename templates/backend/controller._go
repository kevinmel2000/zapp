package controller

import (
	"fmt"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
	"{{PackageName}}/model"
	"{{PackageName}}/model/basic"
	"{{PackageName}}/service"
	log "github.com/mirzaakhena/common/logger"
	"github.com/mirzaakhena/common/utils"
)

// {{PascalCase .Name}}Controller is
type {{PascalCase .Name}}Controller struct {
	{{CamelCase .Name}}Service service.I{{PascalCase .Name}}Service
}

// New{{PascalCase .Name}}Controller is
func New{{PascalCase .Name}}Controller({{CamelCase .Name}}Service service.I{{PascalCase .Name}}Service) *{{PascalCase .Name}}Controller {

	c := {{PascalCase .Name}}Controller{
		{{CamelCase .Name}}Service: {{CamelCase .Name}}Service,
	}

	return &c
}

// Create is
func (g *{{PascalCase .Name}}Controller) Create(c *gin.Context) {

	logInfo := log.Data{
		ClientIP: c.ClientIP(),
		Session:  utils.GenerateUniqueID(),
		Type:     "API",
	}

	var obj model.Create{{PascalCase .Name}}Request
	if err := c.BindJSON(&obj); err != nil {
		log.GetLog().Error(logInfo, "%v", err.Error())
		c.JSON(http.StatusBadRequest, map[string]interface{}{"message": fmt.Sprintf("Invalid Params. Please check data structure and type"), "data": nil})
		return
	}

	log.GetLog().Info(logInfo, "Requested with %v", utils.GetJSON(obj))

	sc := map[string]interface{}{
		"logInfo": logInfo,
	}

	id, err := g.{{CamelCase .Name}}Service.Create(sc, obj)
	if err != nil {
		log.GetLog().Error(logInfo, "%v", err.Error())
		c.JSON(http.StatusBadRequest, map[string]interface{}{"message": err.Error(), "data": nil})
		return
	}

	log.GetLog().Info(logInfo, "Success. %v", fmt.Sprintf("Record with {{CamelCase .Name}}ID %v created", id))
	c.JSON(http.StatusCreated, map[string]interface{}{"message": fmt.Sprintf("Record with ID %v created", id), "data": nil})
}

// GetOne is
func (g *{{PascalCase .Name}}Controller) GetOne(c *gin.Context) {

	id := c.Param("{{CamelCase .Name}}ID")

	logInfo := log.Data{
		ClientIP: c.ClientIP(),
		Session:  utils.GenerateUniqueID(),
		Type:     "API",
	}

	log.GetLog().Info(logInfo, "Request {{CamelCase .Name}}ID %v", id)

	sc := map[string]interface{}{
		"logInfo": logInfo,
	}

	idInt, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		log.GetLog().Error(logInfo, "ID must integer")
		c.JSON(http.StatusBadRequest, map[string]interface{}{"message": "ID must integer", "data": nil})
		return
	}

	obj := g.{{CamelCase .Name}}Service.GetOne(sc, uint(idInt))
	if obj == nil {
		log.GetLog().Info(logInfo, "No record found with {{CamelCase .Name}}ID %v", id)
		c.JSON(http.StatusOK, map[string]interface{}{"message": fmt.Sprintf("No record found with ID %v", id), "data": nil})
		return
	}

	log.GetLog().Info(logInfo, "Record with {{CamelCase .Name}}ID %v found", id)
	c.JSON(http.StatusOK, map[string]interface{}{"message": fmt.Sprintf("Record with ID %v found", id), "data": obj})
}

// GetAll is
func (g *{{PascalCase .Name}}Controller) GetAll(c *gin.Context) {
	pageStr := c.DefaultQuery("page", "1")
	page, err := strconv.Atoi(pageStr)
	if err != nil || page < 1 {
		page = 1
	}

	sizeStr := c.DefaultQuery("size", "30")
	size, err := strconv.Atoi(sizeStr)
	if err != nil || (size < 1 && size > 100) {
		size = 1
	}


	sortBy := c.DefaultQuery("sortBy", "")
	sortDescString := c.DefaultQuery("sortDesc", "false")

	sortDesc, err := strconv.ParseBool(sortDescString)
	if err != nil {
		message := "sortDesc must bool"
		c.JSON(http.StatusBadRequest, map[string]interface{}{"message": message, "data": []interface{}{}})
		return
	}	

	logInfo := log.Data{
		ClientIP: c.ClientIP(),
		Session:  utils.GenerateUniqueID(),
		Type:     "API",
	}

	log.GetLog().Info(logInfo, "Requested with page %v and size %v", page, size)

	filters := map[string]string{ {{range .Fields}}
		"{{CamelCase .Name}}": c.DefaultQuery("f_{{CamelCase .Name}}", ""), {{end}}
	}

	sc := map[string]interface{}{
		"logInfo": logInfo,
	}	

	req := basic.GetAllCommonRequest{
		Filters:  filters,
		Page:     page,
		Size:     size,
		SortBy:   sortBy,
		SortDesc: sortDesc,
	}	

	objs := g.{{CamelCase .Name}}Service.GetAll(sc, req)

	log.GetLog().Info(logInfo, "records found from page %v", page)
	c.JSON(http.StatusOK, map[string]interface{}{"message": fmt.Sprintf("records found from page %v", page), "data": objs})
}

// Update is
func (g *{{PascalCase .Name}}Controller) Update(c *gin.Context) {

	id := c.Param("{{CamelCase .Name}}ID")

	logInfo := log.Data{
		ClientIP: c.ClientIP(),
		Session:  utils.GenerateUniqueID(),
		Type:     "API",
	}

	log.GetLog().Info(logInfo, "Requested {{CamelCase .Name}}ID %v", id) 
	idInt, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		log.GetLog().Error(logInfo, "ID must integer")
		c.JSON(http.StatusBadRequest, map[string]interface{}{"message": "ID must integer", "data": nil})
		return
	}

	var obj model.Update{{PascalCase .Name}}Request
	if err := c.BindJSON(&obj); err != nil {
		log.GetLog().Error(logInfo, "%v", err.Error())
		c.JSON(http.StatusBadRequest, map[string]interface{}{"message": fmt.Sprintf("Invalid Params. Please check data structure and type"), "data": nil})
		return
	}

	log.GetLog().Info(logInfo, "Request %v", utils.GetJSON(obj))

	sc := map[string]interface{}{
		"logInfo": logInfo,
	}

	if err := g.{{CamelCase .Name}}Service.Update(sc, uint(idInt), obj); err != nil {
		log.GetLog().Error(logInfo, "%v", err.Error())
		c.JSON(http.StatusBadRequest, map[string]interface{}{"message": fmt.Sprintf("Error when update record with ID %v", id), "data": nil})
		return
	}

	log.GetLog().Info(logInfo, "Success. %v", fmt.Sprintf("Record with {{CamelCase .Name}}ID %v updated", id))
	c.JSON(http.StatusOK, map[string]interface{}{"message": fmt.Sprintf("Record with ID %v updated", id), "data": nil})

}

// Delete is
func (g *{{PascalCase .Name}}Controller) Delete(c *gin.Context) {

	id := c.Param("{{CamelCase .Name}}ID")

	logInfo := log.Data{
		ClientIP: c.ClientIP(),
		Session:  utils.GenerateUniqueID(),
		Type:     "API",
	}

	log.GetLog().Info(logInfo, "Requested with {{CamelCase .Name}}ID %v", id)

	sc := map[string]interface{}{
		"logInfo": logInfo,
	}

	idInt, err := strconv.ParseUint(id, 10, 32)
	if err != nil {
		log.GetLog().Error(logInfo, "ID must integer")
		c.JSON(http.StatusBadRequest, map[string]interface{}{"message": "ID must integer", "data": nil})
		return
	}
	
	if err := g.{{CamelCase .Name}}Service.Delete(sc, uint(idInt)); err != nil {
		log.GetLog().Error(logInfo, "%v", err.Error())
		c.JSON(http.StatusBadRequest, map[string]interface{}{"message": fmt.Sprintf("Error when delete record with ID %v", id), "data": nil})
		return
	}

	log.GetLog().Info(logInfo, "Success. %v", fmt.Sprintf("Record with {{CamelCase .Name}}ID %v deleted", id))
	c.JSON(http.StatusOK, map[string]interface{}{"message": fmt.Sprintf("Record with ID %v deleted", id), "data": nil})

}
