package service

import (
	"fmt"

	"{{PackagePath}}/server/model"
	"{{PackagePath}}/server/repository"
	"{{PackagePath}}/server/utils/common"
	"{{PackagePath}}/server/utils/transaction"
	"github.com/jinzhu/copier"
)

// I{{PascalCase .Name}}Service is
type I{{PascalCase .Name}}Service interface {
	Create(ctx map[string]interface{}, obj model.Create{{PascalCase .Name}}Request) (string, error)
	GetOne(ctx map[string]interface{}, ID string) *model.{{PascalCase .Name}}Response
	GetAll(ctx map[string]interface{}, req model.GetAllCommonRequest) *model.GetAllCommonResponse
	Delete(ctx map[string]interface{}, ID string) error
	Update(ctx map[string]interface{}, ID string, obj model.Update{{PascalCase .Name}}Request) error
}

// {{PascalCase .Name}}Service is
type {{PascalCase .Name}}Service struct {
	Trx transaction.ITransaction	
	{{PascalCase .Name}}Repository repository.I{{PascalCase .Name}}Repository {{range UniqueFields .Fields}} {{if (eq .DataType "entity")}}
	{{PascalCase .EntityReference}}Repository repository.I{{PascalCase .EntityReference}}Repository {{end}} {{end}}
}

// Create is
func (g *{{PascalCase .Name}}Service) Create(ctx map[string]interface{}, dto model.Create{{PascalCase .Name}}Request) (string, error) {

	ctx["trx"] = g.Trx.GetDB(true)
	defer delete(ctx, "trx")
	defer g.Trx.RollbackOnException(ctx)

	var obj model.{{PascalCase .Name}}

	{{range .Fields}} {{if (eq .DataType "entity")}}
	{
		refObject := g.{{PascalCase .EntityReference}}Repository.GetOne(ctx, dto.{{PascalCase .Name}}ObjID)
		if refObject == nil {
			g.Trx.Rollback(ctx)
			return "", fmt.Errorf("obj with id %v not found", dto.{{PascalCase .Name}}ObjID)
		}
		obj.{{PascalCase .Name}}ObjID = refObject.ID
		obj.{{PascalCase .Name}} = refObject.{{PascalCase .EntityField}}
	} {{else}}
	obj.{{.Name}} = dto.{{.Name}} {{end}} {{end}} 
	obj.ID = common.GetUUID() 

	g.{{PascalCase .Name}}Repository.Create(ctx, &obj)

	g.Trx.Commit(ctx)

	return obj.ID, nil
}

// GetOne is
func (g *{{PascalCase .Name}}Service) GetOne(ctx map[string]interface{}, ID string) *model.{{PascalCase .Name}}Response {
	ctx["trx"] = g.Trx.GetDB(false)
	defer delete(ctx, "trx")
	obj := g.{{PascalCase .Name}}Repository.GetOne(ctx, ID)
	result := model.{{PascalCase .Name}}Response{}
	copier.Copy(&result, obj)
	return &result
}

// GetAll is
func (g *{{PascalCase .Name}}Service) GetAll(ctx map[string]interface{}, req model.GetAllCommonRequest) *model.GetAllCommonResponse {
	ctx["trx"] = g.Trx.GetDB(false)
	defer delete(ctx, "trx")

	r, c := g.{{PascalCase .Name}}Repository.GetAll(ctx, req.Page, req.Size, req.SortBy, req.SortDesc, req.Filters)

	items := []interface{}{}

	for _, item := range r {
		items = append(items, item)
	}

	result := model.GetAllCommonResponse{
		TotalCount: c,
		Items:      items,
	}

	return &result	
}

// Delete is
func (g *{{PascalCase .Name}}Service) Delete(ctx map[string]interface{}, ID string) error {

	ctx["trx"] = g.Trx.GetDB(true)
	defer delete(ctx, "trx")
	defer g.Trx.RollbackOnException(ctx)

	obj := g.{{PascalCase .Name}}Repository.GetOne(ctx, ID)
	if obj == nil {
		g.Trx.Rollback(ctx)
		return fmt.Errorf("obj with id %v not found", ID)
	}

	if err := g.{{PascalCase .Name}}Repository.Delete(ctx, ID); err != nil {
		g.Trx.Rollback(ctx)
		return err
	}

	g.Trx.Commit(ctx)

	return nil

}

// Update is
func (g *{{PascalCase .Name}}Service) Update(ctx map[string]interface{}, ID string, dto model.Update{{PascalCase .Name}}Request) error {

	ctx["trx"] = g.Trx.GetDB(true)
	defer delete(ctx, "trx")
	defer g.Trx.RollbackOnException(ctx)

	obj := g.{{PascalCase .Name}}Repository.GetOne(ctx, ID)
	if obj == nil {
		g.Trx.Rollback(ctx)
		return fmt.Errorf("obj with id %v not found", ID)
	}

	{{range .Fields}} {{if (eq .DataType "entity")}}
	{
		refObject := g.{{PascalCase .EntityReference}}Repository.GetOne(ctx, dto.{{PascalCase .Name}}ObjID)
		if refObject == nil {
			g.Trx.Rollback(ctx)
			return fmt.Errorf("obj with id %v not found", dto.{{PascalCase .Name}}ObjID)
		}
		obj.{{PascalCase .Name}}ObjID = refObject.ID
		obj.{{PascalCase .Name}} = refObject.{{PascalCase .EntityField}}
	} {{else}}
	obj.{{.Name}} = dto.{{.Name}} {{end}} {{end}} 

	if err := g.{{PascalCase .Name}}Repository.Update(ctx, obj); err != nil {
		g.Trx.Rollback(ctx)
		return err
	}

	g.Trx.Commit(ctx)

	return nil
}
