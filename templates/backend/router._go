package controller

import (
	"fmt"
	"net/http"
	"time"

	"bitbucket.org/mirzaakhena/experimenfx1/utils/common"
	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
)

// RouterConfig is
type RouterConfig struct {
	Router              *gin.Engine
	UserController      *UserController	{{range .Entities}}
	{{PascalCase .Name}}Controller *{{PascalCase .Name}}Controller {{end}}
}

// CreateServiceContext is
func CreateServiceContext(c *gin.Context) map[string]interface{} {
	sc := map[string]interface{}{
		"ip":        c.ClientIP(),
		"session":   common.GetShortUniqueID(),
		"source":    "API",
		"methodURL": fmt.Sprintf("%s %s", c.Request.Method, c.Request.URL.Path),
	}
	return sc
}

// Setup is
func (r *RouterConfig) Setup() {

	r.Router.Use(cors.New(cors.Config{
		ExposeHeaders:   []string{"Data-Length"},
		AllowMethods:    []string{"GET", "POST", "PUT", "DELETE", "PATCH", "HEAD", "OPTIONS"},
		AllowAllOrigins: true,
		AllowHeaders:    []string{"Content-Type", "Authorization"},
		MaxAge:          12 * time.Hour,
	}))

	r.Router.StaticFile("./favicon.ico", "../webcontent/favicon.ico")
	r.Router.Static("/static", "../webcontent/static")
	r.Router.LoadHTMLGlob("../webcontent/templates/*")
	r.Router.GET("/", r.UserController.ValidateToken, func(c *gin.Context) {
		c.HTML(http.StatusOK, "index.html", gin.H{"title": "MainMenu"})
	})

	r.Router.Handle("POST", "/register", r.UserController.Register)
	r.Router.Handle("POST", "/login", r.UserController.Login)

	apiGroup := r.Router.Group("/api", r.UserController.ValidateToken)

  {{range .Entities}}
  // {{PascalCase .Name}}
  {
    apiGroup.Handle("POST", "/{{CamelCase .Name}}", r.UserController.EnforceAccessControl("{{UpperCase .Name}}"), r.{{PascalCase .Name}}Controller.Create)
    apiGroup.Handle("GET", "/{{CamelCase .Name}}", r.UserController.EnforceAccessControl("{{UpperCase .Name}}"), r.{{PascalCase .Name}}Controller.GetAll)
    apiGroup.Handle("GET", "/{{CamelCase .Name}}/:{{CamelCase .Name}}ID", r.UserController.EnforceAccessControl("{{UpperCase .Name}}"), r.{{PascalCase .Name}}Controller.GetOne)
    apiGroup.Handle("DELETE", "/{{CamelCase .Name}}/:{{CamelCase .Name}}ID", r.UserController.EnforceAccessControl("{{UpperCase .Name}}"), r.{{PascalCase .Name}}Controller.Delete)
    apiGroup.Handle("PUT", "/{{CamelCase .Name}}/:{{CamelCase .Name}}ID", r.UserController.EnforceAccessControl("{{UpperCase .Name}}"), r.{{PascalCase .Name}}Controller.Update)
  } {{end}}

}
