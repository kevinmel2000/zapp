package repository

import (
	"{{PackagePath}}/model"
	"github.com/jinzhu/gorm"
)

// IUserRepository is
type IUserRepository interface {
	Create(db interface{}, obj *model.User) error
	GetByEmail(db interface{}, email string) *model.User
	GetOne(db interface{}, ID string) *model.User
}

// UserRepository is
type UserRepository struct{}

// NewUserRepository is
func NewUserRepository(db *gorm.DB) *UserRepository {
	db.AutoMigrate(&model.User{})
	return &UserRepository{}
}

// Create is
func (u *UserRepository) Create(db interface{}, obj *model.User) error {
	return db.(*gorm.DB).Create(obj).Error
}

// GetByEmail is
func (u *UserRepository) GetByEmail(db interface{}, email string) *model.User {
	var obj model.User
	db.(*gorm.DB).First(&obj, "email = ?", email)
	if obj.ID == "" {
		return nil
	}
	return &obj

}

// GetOne is
func (u *UserRepository) GetOne(db interface{}, ID string) *model.User {
	var obj model.User

	query := db.(*gorm.DB)

	query.First(&obj, "id = ?", ID)

	if obj.ID == "" {
		return nil
	}
	return &obj
}