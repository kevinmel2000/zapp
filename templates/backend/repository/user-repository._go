package repository

import (
	"{{PackagePath}}/server/model"
	"{{PackagePath}}/server/shared/transaction"
	"github.com/jinzhu/gorm"
)

// ISystemUserRepository is
type ISystemUserRepository interface {
	Create(ctx map[string]interface{}, obj *model.SystemUser) error
	GetByEmail(ctx map[string]interface{}, email string) *model.SystemUser
	GetOne(ctx map[string]interface{}, ID string) *model.SystemUser
}

// SystemUserRepository is
type SystemUserRepository struct{}

// NewSystemUserRepository is
func NewSystemUserRepository(db *gorm.DB) *SystemUserRepository {
	db.AutoMigrate(&model.SystemUser{})
	return &SystemUserRepository{}
}

// Create is
func (u *SystemUserRepository) Create(ctx map[string]interface{}, obj *model.SystemUser) error {
	return transaction.ExtractDB(ctx).Create(obj).Error
}

// GetByEmail is
func (u *SystemUserRepository) GetByEmail(ctx map[string]interface{}, email string) *model.SystemUser {
	var obj model.SystemUser
	transaction.ExtractDB(ctx).First(&obj, "email = ?", email)
	if obj.ID == "" {
		return nil
	}
	return &obj

}

// GetOne is
func (u *SystemUserRepository) GetOne(ctx map[string]interface{}, ID string) *model.SystemUser {
	var obj model.SystemUser

	query := transaction.ExtractDB(ctx)

	query.First(&obj, "id = ?", ID)

	if obj.ID == "" {
		return nil
	}
	return &obj
}