package repository

import (
	"{{PackagePath}}/server/model"
	"{{PackagePath}}/server/shared/transaction"
	"github.com/jinzhu/gorm"
)

// IUserSystemRepository is
type IUserSystemRepository interface {
	Create(ctx map[string]interface{}, obj *model.UserSystem) error
	GetByEmail(ctx map[string]interface{}, email string) *model.UserSystem
	GetOne(ctx map[string]interface{}, ID string) *model.UserSystem
}

// UserSystemRepository is
type UserSystemRepository struct{}

// NewUserSystemRepository is
func NewUserSystemRepository(db *gorm.DB) *UserSystemRepository {
	db.AutoMigrate(&model.UserSystem{})
	return &UserSystemRepository{}
}

// Create is
func (u *UserSystemRepository) Create(ctx map[string]interface{}, obj *model.UserSystem) error {
	return transaction.ExtractDB(ctx).Create(obj).Error
}

// GetByEmail is
func (u *UserSystemRepository) GetByEmail(ctx map[string]interface{}, email string) *model.UserSystem {
	var obj model.UserSystem
	transaction.ExtractDB(ctx).First(&obj, "email = ?", email)
	if obj.ID == "" {
		return nil
	}
	return &obj

}

// GetOne is
func (u *UserSystemRepository) GetOne(ctx map[string]interface{}, ID string) *model.UserSystem {
	var obj model.UserSystem

	query := transaction.ExtractDB(ctx)

	query.First(&obj, "id = ?", ID)

	if obj.ID == "" {
		return nil
	}
	return &obj
}