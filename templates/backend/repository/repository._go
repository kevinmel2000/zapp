package repository

import (
	"fmt"

	"github.com/jinzhu/gorm"
	"{{PackagePath}}/backend/model"
	"{{PackagePath}}/backend/shared/utils"
	"{{PackagePath}}/backend/shared/transaction"
)

// I{{PascalCase .Name}}Repository is
type I{{PascalCase .Name}}Repository interface {
	Create(db interface{}, obj *model.{{PascalCase .Name}}) error
	GetOne(db interface{}, ID string) *model.{{PascalCase .Name}}
	GetAll(db interface{}, page, size int, sortBy string, sortDesc bool, filters map[string]string) ([]model.{{PascalCase .Name}}, uint)
	Delete(db interface{}, ID string) error
	Update(db interface{}, obj *model.{{PascalCase .Name}}) error
}

// {{PascalCase .Name}}Repository is
type {{PascalCase .Name}}Repository struct{}

// New{{PascalCase .Name}}Repository is
func New{{PascalCase .Name}}Repository(db *gorm.DB) *{{PascalCase .Name}}Repository {
	db.AutoMigrate(&model.{{PascalCase .Name}}{})
	return &{{PascalCase .Name}}Repository{}
}

// Create is
func (g *{{PascalCase .Name}}Repository) Create(db interface{}, obj *model.{{PascalCase .Name}}) error {
	return transaction.ExtractDB(db).Create(obj).Error
}

// GetOne is 
func (g *{{PascalCase .Name}}Repository) GetOne(db interface{}, ID string) *model.{{PascalCase .Name}} {
	var obj model.{{PascalCase .Name}}

	query := transaction.ExtractDB(db)

	{{range .Fields}}
		{{if (eq .DataType "entity")}}
			query = query.Preload("{{PascalCase .Name}}Obj")
		{{end}}
	{{end}}

	query.First(&obj, "id = ?", ID)

	if obj.ID == "" {
		return nil
	}
	return &obj
}

// GetAll is
func (g *{{PascalCase .Name}}Repository) GetAll(db interface{}, page, size int, sortBy string, sortDesc bool, filters map[string]string) ([]model.{{PascalCase .Name}}, uint) {
	var objs []model.{{PascalCase .Name}}
	var count uint

	query := transaction.ExtractDB(db).Model(&model.{{PascalCase .Name}}{})

	// filtering
	if filters != nil {
		for k, v := range filters {
			query = query.Where(fmt.Sprintf("%s LIKE ?", utils.SnakeCase(k)), fmt.Sprintf("%s%%", v))
		}
	}

	// count
	query.Count(&count)

	// sorting
	if sortBy != "" {
		if sortDesc {
			query = query.Order(fmt.Sprintf("%s DESC", utils.SnakeCase(sortBy)))
		} else {
			query = query.Order(fmt.Sprintf("%s ASC", utils.SnakeCase(sortBy)))
		}		
	}

	// paging
	query = query.Offset((page - 1) * size).Limit(size)

	query.Find(&objs)
	return objs, count
}

// Delete is
func (g *{{PascalCase .Name}}Repository) Delete(db interface{}, ID string) error {
	return transaction.ExtractDB(db).Delete(model.{{PascalCase .Name}}{}, "id = ?", ID).Error
}

// Update is
func (g *{{PascalCase .Name}}Repository) Update(db interface{}, obj *model.{{PascalCase .Name}}) error {
	return transaction.ExtractDB(db).Save(obj).Error
}
