package restapi

import (
	"net/http"
	"strings"

	"{{PackagePath}}/backend/model"
	service "{{PackagePath}}/backend/service/auth"
	"{{PackagePath}}/backend/shared/utils"
	"{{PackagePath}}/backend/shared/log"
	"github.com/gin-gonic/gin"
)

// SystemUserApi is
type SystemUserApi struct {
	systemUserService service.ISystemUserService
}

// GetSystemUserID is
func GetSystemUserID(c *gin.Context) string {
	extendDataIntf, _ := c.Get("extendData")
	return extendDataIntf.(map[string]interface{})["userID"].(string)
}

// NewSystemUserApi is
func NewSystemUserApi(systemUserService service.ISystemUserService) *SystemUserApi {

	c := SystemUserApi{
		systemUserService: systemUserService,
	}

	return &c
}

// Login is
func (u *SystemUserApi) Login(c *gin.Context) {

	sc := CreateServiceContext(c)

	var dto model.LoginSystemUserRequest

	if err := c.BindJSON(&dto); err != nil {
		log.GetLog().Error("%v", err.Error())
		c.JSON(http.StatusBadRequest, map[string]interface{}{"message": "Invalid Params. Please check data structure and type"})
		return
	}

	token, err := u.systemUserService.Login(dto)
	if err != nil {
		message := log.GetLog().Error("RESPONSE %v", err.Error())
		c.JSON(http.StatusBadRequest, map[string]interface{}{"message": message})
		return
	}

	message := log.GetLog().Info("RESPONSE. Login success with token %v. %v", token, utils.GetJSON(sc))
	c.JSON(http.StatusCreated, map[string]interface{}{"message": message, "data": token})

}

// ValidateToken is
func (u *SystemUserApi) ValidateToken(c *gin.Context) {
	token := c.Request.Header.Get("Authorization")
	s := strings.Fields(token)
	if len(s) != 2 || s[0] != "Bearer" {
		log.GetLog().Error("Not proper Authorization token")
		c.AbortWithStatus(http.StatusForbidden)
		return
	}
	extendDataObj := u.systemUserService.ValidateLoginToken(s[1])
	if extendDataObj == nil {
		log.GetLog().Error("Not Valid token")
		c.AbortWithStatus(http.StatusForbidden)
		return
	}
	c.Set("extendData", extendDataObj.(map[string]interface{}))
	c.Next()
}

// EnforceAccessControl is
func (u *SystemUserApi) EnforceAccessControl(accessName string) gin.HandlerFunc {
	return func(c *gin.Context) {

		extendData, exist := c.Get("extendData")
		if !exist {
			log.GetLog().Error("extendData not exist")			
			c.AbortWithStatus(http.StatusForbidden)
			return
		}

		extendDataMap := extendData.(map[string]interface{})
		if !u.systemUserService.HasAccess(extendDataMap, accessName) {
			log.GetLog().Error("%s does not have access to %s", extendDataMap["name"].(string), accessName)
			c.AbortWithStatus(http.StatusForbidden)
			return
		}

		c.Next()
	}
}

// Register is
func (u *SystemUserApi) Register(c *gin.Context) {

	sc := CreateServiceContext(c)

	var dto model.RegisterSystemUserRequest

	if err := c.BindJSON(&dto); err != nil {
		log.GetLog().Error("%v", err.Error())
		c.JSON(http.StatusBadRequest, map[string]interface{}{"message": "Invalid Params. Please check data structure and type"})
		return
	}

	log.GetLog().Info("REQUEST. Data %v", utils.GetJSON(dto))

	if err := u.systemUserService.Register(dto); err != nil {
		message := log.GetLog().Error("RESPONSE %v", err.Error())
		c.JSON(http.StatusBadRequest, map[string]interface{}{"message": message})
		return
	}

	message := log.GetLog().Info("RESPONSE. Register success. %v", utils.GetJSON(sc))
	c.JSON(http.StatusCreated, map[string]interface{}{"message": message})
}
