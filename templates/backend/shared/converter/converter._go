package utils

import (
	"encoding/json"
)

// GetMSI is
func GetMSI(input map[string]interface{}, key string) map[string]interface{} {
	objIntf, exist := input[key]
	if !exist {
		return nil
	}

	objMapintf, ok := objIntf.(map[string]interface{})
	if !ok {
		return nil
	}

	return objMapintf
}

// GetARI is
func GetARI(input map[string]interface{}, key string) []interface{} {
	objIntf, exist := input[key]
	if !exist {
		return []interface{}{}
	}

	if objIntf == nil {
		return []interface{}{}
	}

	objArrIntf, ok := objIntf.([]interface{})
	if !ok {
		return []interface{}{}
	}

	return objArrIntf
}

// ConMSI is
func ConMSI(input interface{}) map[string]interface{} {
	obj, ok := input.(map[string]interface{})
	if !ok {
		return nil
	}
	return obj
}

// GetMSIFromJSONString is
func GetMSIFromJSONString(bytes []byte) map[string]interface{} {
	var obj interface{}
	json.Unmarshal(bytes, &obj)
	return ConMSI(obj)
}

// GetString is
func GetString(input map[string]interface{}, key string) string {
	strIntf, exist := input[key]
	if !exist {
		return ""
	}

	str, ok := strIntf.(string)
	if !ok {
		return ""
	}
	return str
}

// GetInt is
func GetInt(input map[string]interface{}, key string) int {
	floatIntf, exist := input[key]
	if !exist {
		return 0
	}

	float, ok := floatIntf.(float64)
	if !ok {
		return 0
	}
	return int(float)
}

// GetFloat is
func GetFloat(input map[string]interface{}, key string) float64 {
	floatIntf, exist := input[key]
	if !exist {
		return 0.0
	}

	float, ok := floatIntf.(float64)
	if !ok {
		return 0.0
	}
	return float
}

// GetBool is
func GetBool(input map[string]interface{}, key string) bool {
	boolIntf, exist := input[key]
	if !exist {
		return false
	}

	boolean, ok := boolIntf.(bool)
	if !ok {
		return false
	}
	return boolean
}
