package service

import (
	"{{PackageName}}/dao"
	"{{PackageName}}/model"
	"{{PackageName}}/utils"
)

// I{{PascalCase .Name}}Service is
type I{{PascalCase .Name}}Service interface {
	Create(obj model.Create{{PascalCase .Name}}Request) (string, error) 	{{if (eq DataTypeId "int")}}
	GetOne(ID uint64) *model.{{PascalCase .Name}}
	GetAll(page, size int, sortBy, sortDir string, filter map[string]string) ([]model.{{PascalCase .Name}}, uint)
	Delete(ID uint64) error
	Update(ID uint64, obj model.Update{{PascalCase .Name}}Request) error {{else}}
	GetOne(ID string) *model.{{PascalCase .Name}}
	GetAll(page, size int, sortBy, sortDir string, filter map[string]string) ([]model.{{PascalCase .Name}}, uint)
	Delete(ID string) error
	Update(ID string, obj model.Update{{PascalCase .Name}}Request) error {{end}}
}

// {{PascalCase .Name}}Service is
type {{PascalCase .Name}}Service struct {
	{{CamelCase .Name}}Dao dao.I{{PascalCase .Name}}Dao
}

// New{{PascalCase .Name}}Service is
func New{{PascalCase .Name}}Service({{CamelCase .Name}}Dao dao.I{{PascalCase .Name}}Dao) *{{PascalCase .Name}}Service {
	return &{{PascalCase .Name}}Service{ 
		{{CamelCase .Name}}Dao,
	}
}

// Create is
func (g *{{PascalCase .Name}}Service) Create(dto model.Create{{PascalCase .Name}}Request) (string, error) {

	var obj model.{{PascalCase .Name}}
	{{if (eq DataTypeId "guid")}}
	obj.ID = utils.GenID() {{end}} {{range .Fields}}
	obj.{{.Name}} = dto.{{.Name}} {{end}}

	g.{{CamelCase .Name}}Dao.Create(g.{{CamelCase .Name}}Dao.GetDB(false), &obj)
	return obj.ID, nil
}

// GetOne is {{if (eq DataTypeId "int")}}
func (g *{{PascalCase .Name}}Service) GetOne(ID uint64) *model.{{PascalCase .Name}} { {{else}}
func (g *{{PascalCase .Name}}Service) GetOne(ID string) *model.{{PascalCase .Name}} { {{end}}
	return g.{{CamelCase .Name}}Dao.GetOne(g.{{CamelCase .Name}}Dao.GetDB(false), ID)
}

// GetAll is
func (g *{{PascalCase .Name}}Service) GetAll(page, size int, sortBy, sortDir string, filter map[string]string) ([]model.{{PascalCase .Name}}, uint) {
	return g.{{CamelCase .Name}}Dao.GetAll(g.{{CamelCase .Name}}Dao.GetDB(false), page, size, sortBy, sortDir, filter)
}

// Delete is {{if (eq DataTypeId "int")}}
func (g *{{PascalCase .Name}}Service) Delete(ID uint64) error { {{else}}
func (g *{{PascalCase .Name}}Service) Delete(ID string) error {	{{end}}
	return g.{{CamelCase .Name}}Dao.Delete(g.{{CamelCase .Name}}Dao.GetDB(false), ID)
}

// Update is {{if (eq DataTypeId "int")}}
func (g *{{PascalCase .Name}}Service) Update(ID uint64, dto model.Update{{PascalCase .Name}}Request) error { {{else}}
func (g *{{PascalCase .Name}}Service) Update(ID string, dto model.Update{{PascalCase .Name}}Request) error { {{end}}

	var obj model.{{PascalCase .Name}} 
	{{range .Fields}}
	obj.{{.Name}} = dto.{{.Name}} {{end}}

	return g.{{CamelCase .Name}}Dao.Update(g.{{CamelCase .Name}}Dao.GetDB(false), ID, &obj)
}
