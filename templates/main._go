package main

import (
	"fmt"
	"net/http"
	"strings"
	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"  //
	_ "github.com/jinzhu/gorm/dialects/sqlite" //
	"{{PackageName}}/controller"
	"{{PackageName}}/dao"
	"{{PackageName}}/model"
	"{{PackageName}}/service"
	"{{PackageName}}/shared/config"
	"{{PackageName}}/shared/email"
	log "{{PackageName}}/shared/logger"
	"{{PackageName}}/shared/password"
	"{{PackageName}}/shared/token"
	"{{PackageName}}/shared/transaction"
)

func main() {

	log.GetLog().WithFile("{{AppName}}", "apps", 14)

	log.GetLog().Info("main", "Apps run")

	cf := config.NewRealtimeConfig("config", "$GOPATH/src/{{PackageName}}")

	db, err := gorm.Open(cf.GetString("database.dialect", "sqlite3"), cf.GetString("database.connection_string", "database.db"))
	if err != nil {
		panic(err)
	}
	db.LogMode(true)

	{
		db.AutoMigrate(&model.User{})
		db.AutoMigrate(&model.Space{})
		db.AutoMigrate(&model.UserSpace{})
	}

	router := gin.Default()

	router.Use(cors.New(cors.Config{
		ExposeHeaders:   []string{"Data-Length"},
		AllowMethods:    []string{"GET", "POST", "PUT", "DELETE", "PATCH", "HEAD", "OPTIONS"},
		AllowAllOrigins: true,
		AllowHeaders:    []string{"Content-Type", "Authorization"},
		MaxAge:          12 * time.Hour,
	}))

	trx := transaction.NewGormTransactionDB(db)

	router.GET("/", func(c *gin.Context) {
		c.HTML(http.StatusOK, "index.html", gin.H{"title": "MainMenu"})
	})

	router.Static("/static", "../static")
	router.LoadHTMLGlob("../templates/*")

	em := email.NewEmailImpl()

	ps := password.NewPassword()

	tk := token.NewToken()

	us := dao.UserDao{}

	guestService := service.GuestService{
		Config:   cf,
		Trx:      trx,
		Email:    em,
		Password: ps,
		Token:    tk,
		User:     &us,
	}

	api := controller.MyApi{
		GuestService: &guestService,
	}

	v1 := router.Group("/api")

	v1.Use(func(c *gin.Context) {
		token := c.Request.Header.Get("Authorization")
		s := strings.Fields(token)
		if len(s) != 2 {
			c.AbortWithStatus(http.StatusForbidden)
			return
		}
		if s[0] != "Bearer" {
			c.AbortWithStatus(http.StatusForbidden)
			return
		}
		jwt := tk.ValidateToken("LOGIN", s[1])
		if jwt == nil {
			c.AbortWithStatus(http.StatusForbidden)
			return
		}
		c.Set("jwt", jwt)

		data, ok := jwt.ExtendData.(map[string]interface{})
		if !ok {
			c.AbortWithStatus(http.StatusForbidden)
			return
		}

		c.Set("user.id", data["userId"].(string))
	}){{range .Classes}}

	// {{PascalCase .Name}}
	{
		dao := dao.New{{PascalCase .Name}}Dao(db)
		service := service.New{{PascalCase .Name}}Service(trx, dao)
		c := controller.New{{PascalCase .Name}}Controller(service)

		v1.POST("/{{CamelCase .Name}}", c.Create)
		v1.GET("/{{CamelCase .Name}}", c.GetAll)
		v1.GET("/{{CamelCase .Name}}/:{{CamelCase .Name}}ID", c.GetOne)
		v1.DELETE("/{{CamelCase .Name}}/:{{CamelCase .Name}}ID", c.Delete)
		v1.PUT("/{{CamelCase .Name}}/:{{CamelCase .Name}}ID", c.Update)
	}{{end}}

	router.POST("/register", api.Register)
	router.POST("/login", api.Login)
	router.GET("/activate", api.Activate)
	router.POST("/password/forgot/init", api.ForgotPasswordInit)
	router.POST("/password/forgot/reset", api.ForgotPasswordReset)

	router.Run(fmt.Sprintf(":%d", cf.GetInt("server.port", "8081")))

}
