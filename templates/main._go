package main

import (
	"fmt"
	"net/http"
	"regexp"	
	"strings"
	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"  //
	_ "github.com/jinzhu/gorm/dialects/sqlite" //
	"{{PackageName}}/controller"
	"{{PackageName}}/dao"
	"{{PackageName}}/model"
	"{{PackageName}}/service"
	"{{PackageName}}/shared/config"
	"{{PackageName}}/shared/email"
	log "{{PackageName}}/shared/logger"
	"{{PackageName}}/shared/password"
	"{{PackageName}}/shared/token"
	"{{PackageName}}/shared/transaction"
)

func main() {

	log.GetLog().WithFile("{{AppName}}", "apps", 14)

	log.GetLog().Info("main", "Apps run")

	cf := config.NewRealtimeConfig("config", "$GOPATH/src/{{PackageName}}")

	db, err := gorm.Open(cf.GetString("database.dialect", "sqlite3"), cf.GetString("database.connection_string", "database.db"))
	if err != nil {
		panic(err)
	}
	db.LogMode(true)

	{
		db.AutoMigrate(&model.User{})
		db.AutoMigrate(&model.Space{})
		db.AutoMigrate(&model.UserSpace{})
		db.AutoMigrate(&model.UserPermission{})		
	}

	router := gin.Default()

	router.Use(cors.New(cors.Config{
		ExposeHeaders:   []string{"Data-Length"},
		AllowMethods:    []string{"GET", "POST", "PUT", "DELETE", "PATCH", "HEAD", "OPTIONS"},
		AllowAllOrigins: true,
		AllowHeaders:    []string{"Content-Type", "Authorization"},
		MaxAge:          12 * time.Hour,
	}))

	trx := transaction.NewGormTransactionDB(db)

	router.GET("/", func(c *gin.Context) {
		c.HTML(http.StatusOK, "index.html", gin.H{"title": "MainMenu"})
	})

	router.Static("/static", "../static")
	router.LoadHTMLGlob("../templates/*")

	em := email.NewEmailImpl()

	ps := password.NewPassword()

	tk := token.NewToken()

	us := dao.UserDao{}

	guestService := service.GuestService{
		Config:   cf,
		Trx:      trx,
		Email:    em,
		Password: ps,
		Token:    tk,
		User:     &us,
	}

	userPermissionDao := dao.UserPermissionDao{}

	userService := service.UserService{
		GuestService:   guestService,
		UserPermission: &userPermissionDao,
	}		

	guestController := controller.MyApi{
		GuestService: &guestService,
	}
	
	permissions := []model.Permission{}{{range .Classes}}

	// {{PascalCase .Name}}
	{
		dao := dao.New{{PascalCase .Name}}Dao(db)
		service := service.New{{PascalCase .Name}}Service(trx, dao)
		c := controller.New{{PascalCase .Name}}Controller(service)

		permissions = append(permissions, model.Permission{			
			Method:      "POST",
			Endpoint:    "/{{CamelCase .Name}}",
			Function:    c.Create,
			Description: "Create New {{PascalCase .Name}}",
			Category:    "{{UpperCase .Name}}",
		})

		permissions = append(permissions, model.Permission{			
			Method:      "GET",
			Endpoint:    "/{{CamelCase .Name}}",
			Function:    c.GetAll,
			Description: "Get All {{PascalCase .Name}}",
			Category:    "{{UpperCase .Name}}",
		})

		permissions = append(permissions, model.Permission{			
			Method:      "GET",
			Endpoint:    "/{{CamelCase .Name}}/:{{CamelCase .Name}}ID",
			Function:    c.GetOne,
			Description: "Get One {{PascalCase .Name}}",
			Category:    "{{UpperCase .Name}}",
		})

		permissions = append(permissions, model.Permission{			
			Method:      "DELETE",
			Endpoint:    "/{{CamelCase .Name}}/:{{CamelCase .Name}}ID",
			Function:    c.Delete,
			Description: "Delete a {{PascalCase .Name}}",
			Category:    "{{UpperCase .Name}}",
		})

		permissions = append(permissions, model.Permission{			
			Method:      "PUT",
			Endpoint:    "/{{CamelCase .Name}}/:{{CamelCase .Name}}ID",
			Function:    c.Update,
			Description: "Update a {{PascalCase .Name}}",
			Category:    "{{UpperCase .Name}}",
		})

	}{{end}}

	uuidv4Regex := regexp.MustCompile("[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}")

	regexColonID := regexp.MustCompile(":[a-zA-Z0-9]+")

	permissionMaps := map[[2]string]string{}

	apiController := router.Group("/api")

	apiController.Use(func(c *gin.Context) {
		token := c.Request.Header.Get("Authorization")
		s := strings.Fields(token)
		if len(s) != 2 {
			c.AbortWithStatus(http.StatusForbidden)
			return
		}
		if s[0] != "Bearer" {
			c.AbortWithStatus(http.StatusForbidden)
			return
		}
		jwt := tk.ValidateToken("LOGIN", s[1])
		if jwt == nil {
			c.AbortWithStatus(http.StatusForbidden)
			return
		}
		c.Set("jwt", jwt)

		data, ok := jwt.ExtendData.(map[string]interface{})
		if !ok {
			c.AbortWithStatus(http.StatusForbidden)
			return
		}

		userID := data["userId"].(string)
		c.Set("user.id", userID)

		urlx := uuidv4Regex.ReplaceAllString(c.Request.URL.Path, "#")

		permissionCode, ok := permissionMaps[[2]string{c.Request.Method, urlx}]
		if !ok {
			c.AbortWithStatus(http.StatusForbidden)
			return
		}

		spaceID := c.Param("spaceId")

		isAccessable := userService.IsAccessable(model.ServiceContext{"userId": permissionCode}, model.IsAccessableRequest{
			MethodEndpoint:    permissionCode,
			SpaceID: spaceID,
		})

		if !isAccessable {
			c.AbortWithStatus(http.StatusForbidden)
			return
		}

	})

	for _, permission := range permissions {
		apiController.Handle(permission.Method, permission.Endpoint, permission.Function)
		hashedIDURL := regexColonID.ReplaceAllString(apiController.BasePath()+permission.Endpoint, "#")
		permissionMaps[[2]string{permission.Method, hashedIDURL}] = fmt.Sprintf("%s_%s", permission.Method, hashedIDURL)
	}

	// everyone free to access it
	router.POST("/register", guestController.Register)
	router.POST("/login", guestController.Login)
	router.GET("/activate", guestController.Activate)
	router.POST("/password/forgot/init", guestController.ForgotPasswordInit)
	router.POST("/password/forgot/reset", guestController.ForgotPasswordReset)

	router.Run(fmt.Sprintf(":%d", cf.GetInt("server.port", "8081")))

}
