package main

import (
	"fmt"
	"net/http"
	"regexp"
	"strings"
	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mysql"  //
	_ "github.com/jinzhu/gorm/dialects/sqlite" //
	bocontroller "github.com/mirzaakhena/admin/controller"
	bodao "github.com/mirzaakhena/admin/dao"
	bomodel "github.com/mirzaakhena/admin/model"
	boservice "github.com/mirzaakhena/admin/service"
	"{{PackageName}}/controller"
	"{{PackageName}}/dao"
	"{{PackageName}}/service"
	"github.com/mirzaakhena/common/config"
	"github.com/mirzaakhena/common/email"
	log "github.com/mirzaakhena/common/logger"
	"github.com/mirzaakhena/common/password"
	"github.com/mirzaakhena/common/token"
	"github.com/mirzaakhena/common/transaction"
)

func main() {

	log.GetLog().WithFile("{{AppName}}", "apps", 14)

	log.GetLog().Info("main", "Apps run")

	cf := config.NewRealtimeConfig("config", "$GOPATH/src/{{PackageName}}")

	db, err := gorm.Open(cf.GetString("database.dialect", "sqlite3"), cf.GetString("database.connection_string", "database.db"))
	if err != nil {
		panic(err)
	}
	db.LogMode(true)

	{
		db.AutoMigrate(&bomodel.User{})
		db.AutoMigrate(&bomodel.Space{})
		db.AutoMigrate(&bomodel.UserSpace{})
		db.AutoMigrate(&bomodel.UserPermission{})
	}

	router := gin.Default()

	router.Use(cors.New(cors.Config{
		ExposeHeaders:   []string{"Data-Length"},
		AllowMethods:    []string{"GET", "POST", "PUT", "DELETE", "PATCH", "HEAD", "OPTIONS"},
		AllowAllOrigins: true,
		AllowHeaders:    []string{"Content-Type", "Authorization"},
		MaxAge:          12 * time.Hour,
	}))

	trx := transaction.NewGormTransactionDB(db)

	router.GET("/", func(c *gin.Context) {
		c.HTML(http.StatusOK, "index.html", gin.H{"title": "MainMenu"})
	})

	router.Static("/static", "../static")
	router.LoadHTMLGlob("../templates/*")
	
	{{range .Classes}}
	// {{PascalCase .Name}}
	{
		myDao := dao.New{{PascalCase .Name}}Dao(db)
		service := service.New{{PascalCase .Name}}Service(trx, myDao)
		c := controller.New{{PascalCase .Name}}Controller(service)

		router.Handle("POST", "/{{CamelCase .Name}}", c.Create)
		router.Handle("GET", "/{{CamelCase .Name}}", c.GetAll)
		router.Handle("GET", "/{{CamelCase .Name}}/:{{CamelCase .Name}}ID", c.GetOne)
		router.Handle("DELETE", "/{{CamelCase .Name}}/:{{CamelCase .Name}}ID", c.Delete)
		router.Handle("PUT", "/{{CamelCase .Name}}/:{{CamelCase .Name}}ID", c.Update)
	}
	{{end}}

	router.Run(fmt.Sprintf(":%d", cf.GetInt("server.port", "8081")))

}
